





import 'package:flutter/material.dart';

import 'package:mobile_app_/modules/residental-and-communal-compl-filter/widgets/room_ask.dart';
import 'package:mobile_app_/modules/residental-and-communal-compl-filter/widgets/Slider.dart';

class RoomsFilter extends StatefulWidget {
  
  const RoomsFilter({super.key});



  @override
  State<RoomsFilter> createState() => _RoomsFilterState();
}

class _RoomsFilterState extends State<RoomsFilter> {
  

    Map<String, RangeValues> valueMap = {
      'coast':  RangeValues(6, 13),
      'square': RangeValues(37, 93),
      'floor':  RangeValues(2, 16),
    };

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
    List<bool> rooms = [false, false, false, false, false, false];
  
    void updateRoom(bool newAsk, int id) {
        rooms[id] = newAsk;
    }

    void updateCoast(RangeValues newCoast, String name) {
      valueMap[name] = newCoast;
    }


  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return 
    
    Column( 

      children: [

        // –ö–æ—Ä–ø—É—Å–æ–≤ –≤ MVP –Ω–µ –±—É–¥–µ—Ç üòé

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç  
        Container(
          margin: EdgeInsets.only(right: MediaQuery.of(context).size.width * 0.47, top: MediaQuery.of(context).size.height * 0.02),
          child: Text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", style: theme.textTheme.labelLarge),
        ),
        Row(
          children: [
          // –°—Ç—É–¥–∏—è ?
          RoomAskStud(ask: rooms[0], room_name: "–°—Ç—É–¥–∏—è", updateAsk: updateRoom, id: 0),

          // 1 ?
          RoomAsk(ask: rooms[1], room_name: "1", updateAsk: updateRoom, id: 1),
          
          // 2 ?
          RoomAsk(ask: rooms[2], room_name: "2", updateAsk: updateRoom, id: 2,),
          
          // 3 ?
          RoomAsk(ask: rooms[3], room_name: "3", updateAsk: updateRoom, id: 3),
          
          // 4 ?
          RoomAsk(ask: rooms[4], room_name: "4", updateAsk: updateRoom, id: 4),
          
          // 5 ?
          RoomAsk(ask: rooms[5], room_name: "5+", updateAsk: updateRoom, id: 5)
      
          ]
        ),
        // –°–ª–∞–π–¥–µ—Ä—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–ª–æ—â–∞–¥–∏ –∏ —ç—Ç–∞–∂–∞ 
        Column(  
          children: [

            // —Å–ª–∞–π–¥–µ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            MySlider(lable: "–°—Ç–æ–∏–º–æ—Å—Ç—å", description: "–û—Ç 6 –¥–æ 13 –º–ª–Ω ‚ÇΩ", min: 6, max: 13, divisions: 7, values: valueMap['coast'] as RangeValues, valueName: "coast", updateCoast: updateCoast),
            
            // —Å–ª–∞–π–¥–µ—Ä –ø–ª–æ—â–∞–¥–∏
            MySlider(lable: "–ü–ª–æ—â–∞–¥—å", description: "–û—Ç 37 –¥–æ 93 –º2", min: 37, max: 93, divisions: 56, values: valueMap['square'] as RangeValues, valueName: "square", updateCoast: updateCoast),

            // —Å–ª–∞–π–¥–µ—Ä –≠—Ç–∞–∂–µ–π
            MySlider(lable: "–≠—Ç–∞–∂", description: "–û—Ç 2 –¥–æ 16", min: 2, max: 16, divisions: 14, values: valueMap['floor'] as RangeValues, valueName: "floor", updateCoast: updateCoast, ),

          ]
        ),

         // ignore: avoid_unnecessary_containers
         Container(
          child: ElevatedButton(
            onPressed: () {
              print(" ${rooms}, —Å—Ç–æ–∏–º–æ—Å—Ç—å ${valueMap['coast'] as RangeValues}, —ç—Ç–∞–∂ ${valueMap['floor'] as RangeValues}, –ø–ª–æ—â–∞–¥—å ${valueMap['square'] as RangeValues}");
            },
            child: const Text('–ù–∞–π—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏—è', style: TextStyle(color: Colors.white)), // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
          )
        ),

      ]
    );
  }
}